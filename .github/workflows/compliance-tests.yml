name: Compliance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "TEST_BASE_URL=http://localhost:3000" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "ADMIN_TOKEN=test-admin-token" >> .env.test
          echo "USER_TOKEN=test-user-token" >> .env.test
      
      - name: Run security tests
        run: pnpm test:security
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: coverage/

  compliance-tests:
    name: Compliance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "TEST_BASE_URL=http://localhost:3000" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "ADMIN_TOKEN=test-admin-token" >> .env.test
          echo "USER_TOKEN=test-user-token" >> .env.test
      
      - name: Run compliance tests
        run: pnpm test:compliance
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "TEST_BASE_URL=http://localhost:3000" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "ADMIN_TOKEN=test-admin-token" >> .env.test
          echo "USER_TOKEN=test-user-token" >> .env.test
      
      - name: Run performance tests
        run: pnpm test:performance
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "TEST_BASE_URL=http://localhost:3000" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "ADMIN_TOKEN=test-admin-token" >> .env.test
          echo "USER_TOKEN=test-user-token" >> .env.test
      
      - name: Run tests with coverage
        run: pnpm test:coverage
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Run security audit
        run: pnpm audit --audit-level=high
      
      - name: Run dependency check
        run: pnpm audit --audit-level=moderate

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [security-tests, compliance-tests, performance-tests, code-coverage, security-scan]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "One or more compliance tests failed!"
          echo "Please check the test results and fix any issues."
          # Add notification logic here (Slack, email, etc.)