# Gemini API Mocking Strategy

This document outlines the strategy for mocking the Google Gemini API during development and testing. Mocking allows us to develop and test features that rely on Gemini without incurring API costs, hitting rate limits, or depending on external service availability.

## 1. Goals

*   **Cost Reduction:** Avoid unnecessary API calls to Gemini during development and automated testing.
*   **Faster Development:** Eliminate network latency and external service dependencies for quicker feedback cycles.
*   **Consistent Testing:** Ensure predictable responses for unit, integration, and E2E tests.
*   **Offline Development:** Enable developers to work on AI-dependent features without an internet connection.
*   **Error Simulation:** Easily simulate various API responses, including errors, rate limits, and unexpected data.

## 2. Approach

We will implement API route interception using Next.js Middleware to redirect requests intended for the actual Gemini API to local mock handlers.

### 2.1. Next.js Middleware (`middleware.ts`)

The `middleware.ts` file will be responsible for:

*   **Environment Check:** Only enable mocking in `development` environments (controlled by `process.env.NODE_ENV`).
*   **Feature Flag:** Use an environment variable (`ENABLE_GEMINI_MOCKING`) to explicitly enable/disable mocking.
*   **Route Matching:** Identify API routes that interact with the Gemini API (e.g., `/api/chat`, `/api/analyze-image`).
*   **Request Rewriting:** Rewrite the URL of matched requests to point to a corresponding mock API route (e.g., `/api/chat` -> `/api/mock/chat`).

**Example Middleware Logic:**

```typescript
// middleware.ts
import { NextRequest, NextResponse } from 'next/server';

export async function middleware(request: NextRequest) {
  if (process.env.NODE_ENV !== 'development' || process.env.ENABLE_GEMINI_MOCKING !== 'true') {
    return NextResponse.next();
  }

  const geminiRoutes = [
    '/api/chat',
    '/api/gemini-live',
    // ... other Gemini-dependent API routes
  ];

  const isGeminiRoute = geminiRoutes.some(route => request.nextUrl.pathname.startsWith(route));

  if (isGeminiRoute) {
    const mockUrl = request.nextUrl.clone();
    mockUrl.pathname = '/api/mock' + request.nextUrl.pathname; // Prepend /api/mock
    console.log(`ðŸŸ  Mocking Gemini API: ${request.nextUrl.pathname} -> ${mockUrl.pathname}`);
    return NextResponse.rewrite(mockUrl);
  }

  return NextResponse.next();
}

export const config = {
  matcher: ['/api/:path*'], // Apply middleware to all /api routes
};
