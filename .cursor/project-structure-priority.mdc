# Project Structure and Priority Analysis

This document outlines the current project structure, identifies key areas, and proposes a priority order for development and refactoring based on common web application patterns and the provided file list.

## 1. Current Project Structure Overview

The project appears to be a Next.js application with a strong emphasis on AI-powered chat and lead generation, featuring:

*   **`app/` directory:** Utilizes the Next.js App Router for routing, layouts, and API routes.
    *   `app/(chat)/chat/`: Core chat application, likely including UI components, hooks, and types.
    *   `app/api/`: Backend API routes, including admin, AI integrations (Gemini), lead capture, meetings, and various tools.
    *   `app/admin/`: Admin dashboard pages and login.
    *   `app/(site)/`: Public-facing website pages (home, about, contact).
*   **`components/` directory:** Houses reusable React components, including Shadcn UI components (`components/ui/`) and custom components (e.g., `components/admin/`, `components/chat/`).
*   **`hooks/` directory:** Contains custom React hooks for encapsulating logic and state.
*   **`lib/` directory:** Core utility functions, services, and business logic (e.g., `supabase`, `auth`, `lead-manager`, `model-selector`).
*   **`scripts/` directory:** Various Node.js and SQL scripts for database migrations, testing, and development utilities.
*   **`supabase/` directory:** Supabase-specific configurations and database migrations.
*   **`tests/` directory:** Comprehensive test suite (unit, integration, E2E).
*   **`types/` directory:** Global TypeScript type definitions.
*   **Documentation (`.md`, `.mdc` files):** Extensive documentation covering AI models, backend architecture, design, testing, etc.

## 2. Key Areas and Their Interdependencies

1.  **AI Chat Core (`app/(chat)/chat/`, `app/api/chat`, `lib/conversation-state-manager`, `lib/model-selector`):** This is the central functionality. It relies heavily on API routes, state management, and AI model integration.
2.  **Lead Generation System (`app/(chat)/chat/components/lead-capture/`, `app/api/lead-capture`, `lib/lead-manager`, `lib/lead-management`):** Integrates with the chat to capture and manage lead data.
3.  **Admin Dashboard (`app/admin/`, `app/api/admin/`, `components/admin/`, `lib/auth`):** Provides monitoring and management tools, requiring robust authentication and data access.
4.  **Authentication & Security (`lib/auth`, `middleware.ts`, `lib/api-security`):** Cross-cutting concern, fundamental for all protected routes and data.
5.  **Database (`lib/supabase/`, `supabase/migrations/`, `scripts/`):** Underpins almost all persistent data.
6.  **Tooling & Integrations (`app/api/tools/`, `lib/services/tool-service`, various modal/card components):** Extends AI capabilities with specific actions (e.g., ROI calculation, screen share).
7.  **UI/UX (`components/`, `app/(site)/`, `app/(chat)/chat/components/new-ui/`):** Frontend presentation layer, including a planned "new-ui" overhaul.
8.  **Observability (`lib/server-activity-logger`, `lib/token-usage-logger`, `components/admin/AIPerformanceMetrics`, `components/admin/RealTimeActivity`):** Critical for monitoring system health, performance, and costs.
9.  **Testing (`tests/`, `scripts/run-tests.sh`):** Ensures correctness and stability.

## 3. Priority Order for Development/Refactoring

Based on the current state and common development practices, here's a proposed priority order:

### Priority 1: Core Functionality & Stability (Foundational)

*   **Authentication & Authorization (`lib/auth`, `middleware.ts`, `app/admin/login/page.tsx`):**
    *   **Reason:** Absolutely critical for any secure application. Ensure admin and user authentication is robust and correctly implemented across all protected routes.
    *   **Action:** Verify JWT handling, role-based access, and middleware configuration.
*   **Database Schema & RLS (`supabase/migrations/`, `lib/supabase/server.ts`):**
    *   **Reason:** Data integrity and security are paramount. Incorrect RLS can lead to data breaches.
    *   **Action:** Review and test all RLS policies, ensure migrations are idempotent and correctly applied.
*   **Core AI Chat Flow (`app/api/chat/route.ts`, `lib/conversation-state-manager.ts`, `app/(chat)/chat/page.tsx`):**
    *   **Reason:** This is the primary value proposition. Ensure the chat interaction is stable, responsive, and correctly integrates with Gemini.
    *   **Action:** Focus on message sending, AI response streaming, and basic conversation state management.
*   **Error Handling & Logging (`app/error.tsx`, `lib/server-activity-logger.ts`):**
    *   **Reason:** Essential for debugging, monitoring, and providing a good user experience during failures.
    *   **Action:** Ensure comprehensive logging for all API routes and graceful error display on the frontend.

### Priority 2: Essential Features & Performance

*   **Lead Generation Integration (`app/api/lead-capture/route.ts`, `lib/lead-manager.ts`, `app/(chat)/chat/components/LeadCaptureFlow.tsx`):**
    *   **Reason:** Directly tied to business value. Ensure lead data is captured and managed effectively.
    *   **Action:** Verify the flow from UI to backend, data persistence, and lead research integration.
*   **AI Model Selection & Token Usage (`lib/model-selector.ts`, `lib/token-usage-logger.ts`):**
    *   **Reason:** Critical for cost control and performance optimization of AI interactions.
    *   **Action:** Refine model selection logic, ensure accurate token tracking and budget enforcement.
*   **Basic UI Responsiveness & Accessibility:**
    *   **Reason:** Ensures the application is usable across devices and for all users.
    *   **Action:** Address major layout issues on different screen sizes and implement basic accessibility (e.g., alt text, semantic HTML).

### Priority 3: Enhancements & Admin Tools

*   **Admin Dashboard Core (`app/admin/page.tsx`, `components/admin/AdminDashboard.tsx`):**
    *   **Reason:** Provides necessary insights and control for administrators.
    *   **Action:** Implement key metrics display (AI performance, analytics, leads list).
*   **Tool Integrations (e.g., `VideoToAppGenerator`, `ScreenShare`):**
    *   **Reason:** Adds significant value to the AI consultation.
    *   **Action:** Ensure these tools function correctly and integrate seamlessly with the chat.
*   **Real-time Activity Monitoring (`components/admin/RealTimeActivity.tsx`, `lib/server-activity-logger.ts`):**
    *   **Reason:** Provides operational visibility.
    *   **Action:** Ensure activity logs are correctly captured and displayed in real-time.

### Priority 4: UI Overhaul & Advanced Features

*   **New UI Components (`app/(chat)/chat/components/new-ui/*`):**
    *   **Reason:** Represents a significant design update. Should be tackled once core functionality is stable.
    *   **Action:** Implement the new chat layout, sidebar, and composer.
*   **Advanced AI Features (e.g., `gemini-live-conversation`, `educational-content`):**
    *   **Reason:** Adds depth to the AI capabilities.
    *   **Action:** Develop and integrate these more complex AI interactions.
*   **Comprehensive Testing & Optimization:**
    *   **Reason:** Continuous improvement.
    *   **Action:** Expand test coverage, conduct performance profiling, and optimize for production.

This prioritization helps in building a stable foundation before layering on more complex features and design changes.
