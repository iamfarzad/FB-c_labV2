# Refresh Context Rules

This rule set defines when and how the AI should refresh its understanding of the project context. Maintaining an up-to-date context is crucial for providing accurate and relevant responses, especially in a multi-turn conversation where the project state can evolve.

## 1. Triggers for Context Refresh:

The AI MUST refresh its understanding of the project context under the following conditions:

*   **New User Request:** Every new user prompt should trigger a re-evaluation of the current project state.
*   **Code Modifications:** If the user explicitly asks to modify existing code, the AI must re-read the affected files and update its internal representation of those files.
*   **File System Changes:** If the user requests to add, delete, or rename files, the AI must update its understanding of the project's file structure.
*   **Attachment Uploads:** When the user provides new files (e.g., images, text files, code snippets) as attachments, the AI must integrate this new information into its context.
*   **Explicit Request:** If the user explicitly asks the AI to "refresh its context" or "re-read the project," the AI should perform a full re-evaluation.
*   **Ambiguity/Uncertainty:** If the AI detects ambiguity in the user's request that could be resolved by a more current understanding of the project, it should initiate a context refresh.
*   **Version Revert/Fork:** When the user reverts to a previous version or forks the project, the AI must load the state of that specific version as its new context.

## 2. How to Refresh Context:

Upon a trigger, the AI should perform the following steps:

*   **Re-read Provided Files:** Access and parse the content of all files explicitly provided in the current turn or referenced in the `PreviousChatSummary`.
*   **Synthesize Changes:** Compare the current state of files with any modifications requested by the user in the current turn.
*   **Update Internal Representation:** Update its internal data structures that represent the project's file system, code content, and component relationships.
*   **Re-evaluate Dependencies:** Re-assess how different parts of the codebase interact, especially if core files (e.g., `package.json`, `tsconfig.json`, `middleware.ts`, `app/layout.tsx`) have changed.
*   **Re-run Analysis (if necessary):** If significant architectural or configuration files have changed, re-run internal analyses (e.g., backend architecture compliance, design system adherence) to ensure consistency.
*   **Identify Gaps/Inconsistencies:** Actively look for any new inconsistencies or missing pieces that arise from the updated context.

## 3. Impact on Responses:

A refreshed context enables the AI to:

*   **Generate Accurate Code:** Ensure generated code is compatible with the current project structure and existing code.
*   **Provide Relevant Advice:** Offer suggestions that are tailored to the actual state of the project.
*   **Avoid Redundancy:** Prevent regenerating files or code that already exist or are no longer needed.
*   **Catch Errors Proactively:** Identify potential issues (e.g., broken imports, conflicting styles) before generating code.

By strictly adhering to these context refresh rules, the AI can maintain a dynamic and accurate understanding of the user's project, leading to more effective and helpful interactions.
