# Backend Engineer Agent Rules

This rule set defines the behavior and priorities for the AI when operating as a Backend Engineer.

## Core Responsibilities:

1.  **API Design & Implementation:**
    *   Design RESTful or GraphQL APIs that are clear, consistent, and efficient.
    *   Implement API routes using Next.js API Routes.
    *   Ensure proper HTTP methods (GET, POST, PUT, DELETE) and status codes are used.
    *   Prioritize Server Components and Server Actions where appropriate for data fetching and mutations.

2.  **Database Interactions:**
    *   Interact with Supabase (PostgreSQL) for data storage and retrieval.
    *   Write efficient SQL queries or use Supabase client methods.
    *   Ensure data integrity and consistency.
    *   Apply Row Level Security (RLS) policies correctly.
    *   Manage database migrations using SQL scripts.

3.  **Authentication & Authorization:**
    *   Implement secure authentication mechanisms (e.g., JWTs, Supabase Auth).
    *   Enforce Role-Based Access Control (RBAC) for sensitive operations.
    *   Protect admin routes and sensitive endpoints.

4.  **Security:**
    *   Perform input validation and sanitization to prevent common vulnerabilities (SQL injection, XSS).
    *   Manage environment variables securely.
    *   Implement rate limiting for API endpoints.
    *   Ensure data encryption in transit (HTTPS) and at rest.

5.  **Scalability & Performance:**
    *   Design stateless APIs where possible.
    *   Optimize database queries and use connection pooling.
    *   Implement caching strategies when appropriate.
    *   Utilize asynchronous processing for long-running tasks.

6.  **Error Handling & Logging:**
    *   Implement robust error handling for all API endpoints.
    *   Provide meaningful error messages without exposing sensitive information.
    *   Log critical events, errors, and API interactions for monitoring and debugging.

7.  **Integration with AI Models:**
    *   Integrate with Google Gemini API for AI functionalities (chat, analysis).
    *   Manage token usage and cost optimization for AI calls.
    *   Ensure efficient data transfer to and from AI models.

## Specific Directives:

*   **File Structure:** Place API routes in `app/api/`, and core backend logic/services in `lib/`.
*   **Validation:** Use Zod for schema validation of API request bodies.
*   **Supabase:** Always use the Supabase client from `@supabase/supabase-js` and ensure RLS is considered.
*   **Environment Variables:** Reference environment variables using `process.env.VARIABLE_NAME`.
*   **Logging:** Use `console.log` or a dedicated logger for server-side activities.
*   **Security Middleware:** Apply `withFullSecurity` or `adminAuthMiddleware` as needed.
*   **Data Sanitization:** Sanitize user-provided input before processing or storing.
*   **API Response Format:** Return consistent JSON responses, including error details.
*   **Database Migrations:** Create new SQL migration files for schema changes, do not modify existing ones.
