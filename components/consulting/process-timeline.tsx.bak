"use client"

import React from "react"
import { cn } from "@/lib/utils"
import { Search, LayoutDashboard, Code, TestTube2, Rocket } from "lucide-react"
import { CheckCircle2 } from "lucide-react"

interface ProcessTimelineProps {
  className?: string
  theme?: "light" | "dark"
}

const PROCESS_STEPS = [
  {
    id: "process-1",
    title: "Discovery & Analysis",
    description: "We start by understanding your business needs, challenges, and goals to identify the best AI solutions. Our team analyzes your requirements and creates a tailored plan.",
    icon: Search,
    benefits: [
      "Comprehensive needs assessment",
      "Competitor analysis",
      "Requirement documentation",
      "Success metrics definition"
    ]
  },
  {
    id: "process-2",
    title: "Solution Design",
    description: "We design a comprehensive solution architecture, select the right technologies, and create wireframes and prototypes to visualize the end result.",
    icon: LayoutDashboard,
    benefits: [
      "Solution architecture",
      "Technology stack selection",
      "UI/UX wireframes",
      "Prototype development"
    ]
  },
  {
    id: "process-3",
    title: "Development & Integration",
    description: "Our team builds and integrates the AI solution with your existing systems and workflows, ensuring seamless operation and optimal performance.",
    icon: Code,
    benefits: [
      "Agile development",
      "Continuous integration",
      "API development",
      "System integration"
    ]
  },
  {
    id: "process-4",
    title: "Testing & Optimization",
    description: "We rigorously test the solution, gather feedback, and optimize for performance, accuracy, and user experience.",
    icon: TestTube2,
    benefits: [
      "Unit & integration testing",
      "Performance optimization",
      "User acceptance testing",
      "Security audits"
    ]
  },
  {
    id: "process-5",
    title: "Deployment & Support",
    description: "We deploy the solution to production and provide ongoing support, maintenance, and updates to ensure long-term success and ROI.",
    icon: Rocket,
    benefits: [
      "CI/CD pipeline setup",
      "Performance monitoring",
      "Maintenance & updates",
      "24/7 support"
    ]
  },
]

/**
 * A component that displays a vertical timeline of the development process
 * with interactive cards for each step.
 * 
 * @component
 * @example
 * <ProcessTimeline theme="light" />
 */
export function ProcessTimeline({ 
  className, 
  theme = "light" 
}: ProcessTimelineProps) {
  const textColor = theme === "dark" ? "text-[var(--color-light-silver)]" : "text-[var(--color-gunmetal)]"
  const mutedTextColor = theme === "dark" ? "text-[var(--color-light-silver)]/90" : "text-[var(--color-gunmetal)]/90"
  const cardBg = theme === "dark" ? "bg-[var(--glass-bg)]" : "bg-white"
  const cardBorder = theme === "dark" ? "border-[var(--glass-border)]" : "border-gray-200"
  const accentColor = "text-[var(--color-orange-accent)]"

  return (
    <section className={cn("relative py-16 md:py-24 lg:py-32 overflow-hidden", className)}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-16">
          <span className={`inline-block px-4 py-2 rounded-full ${cardBg} ${cardBorder} border mb-4 text-sm font-medium ${accentColor} uppercase tracking-wider`}>
            How We Work
          </span>
          <h2 className={`text-3xl md:text-4xl lg:text-5xl font-bold ${textColor} mb-4`}>
            Our Process
          </h2>
          <p className={`text-lg md:text-xl ${mutedTextColor} max-w-3xl mx-auto`}>
            A transparent, collaborative approach to delivering AI solutions that drive real business impact
          </p>
        </div>

        {/* Timeline */}
        <div className="relative max-w-4xl mx-auto">
          {/* Vertical line */}
          <div className="absolute left-4 md:left-1/2 w-0.5 h-full bg-gradient-to-b from-[var(--color-orange-accent)] to-[var(--color-orange-accent-light)] -translate-x-1/2" />
          
          {/* Timeline items */}
          <div className="space-y-12">
            {PROCESS_STEPS.map((step, index) => {
              const Icon = step.icon
              const isEven = index % 2 === 0
              
              return (
                <div 
                  key={step.id}
                  className={cn(
                    "relative flex items-start md:items-center",
                    !isEven && "md:flex-row-reverse"
                  )}
                >
                  {/* Timeline dot */}
                  <div className={cn(
                    "absolute left-0 md:left-1/2 w-8 h-8 rounded-full flex items-center justify-center z-10 -translate-x-1/2 md:translate-x-0",
                    "bg-gradient-to-br from-[var(--color-orange-accent)] to-[var(--color-orange-accent-light)] text-white"
                  )}>
                    <Icon className="w-4 h-4" />
                  </div>
                  
                  {/* Content card */}
                  <div className={cn(
                    "relative w-full md:w-5/12 p-6 rounded-xl",
                    cardBg,
                    cardBorder,
                    "border shadow-sm hover:shadow-md transition-shadow duration-300",
                    isEven ? "md:mr-auto md:pr-12" : "md:ml-auto md:pl-12"
                  )}>
                    <h3 className={`text-xl font-bold ${textColor} mb-2`}>
                      {step.title}
                    </h3>
                    <p className={`${mutedTextColor} mb-4`}>
                      {step.description}
                    </p>
                    
                    <div className="space-y-3">
                      <div className="flex items-center text-sm font-medium text-[var(--color-orange-accent)]">
                        <CheckCircle2 className="w-4 h-4 mr-2" />
                        <span>Key Benefits</span>
                      </div>
                      <ul className="space-y-2">
                        {step.benefits.map((benefit, i) => (
                          <li 
                            key={`${step.id}-benefit-${i}`}
                            className="flex items-start"
                          >
                            <CheckCircle2 className={`w-4 h-4 mt-0.5 mr-2 flex-shrink-0 ${accentColor}`} />
                            <span className={mutedTextColor}>
                              {benefit}
                            </span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        </div>
      </div>
    </section>
  )
}
